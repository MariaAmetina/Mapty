'use strict';

class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10); //–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∏—Å–µ–ª –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–π–¥–∏, –æ–±—ã—á–Ω–æ –∞–π–¥–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  clicks = 0;

  constructor(coords, distance, duration) {
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }

  _setDescription() {
    const months = [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December',
    ];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }
}

class Running extends Workout {
  type = 'running';

  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();
    this._setDescription();
  }

  calcPace() {
    //min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  type = 'cycling';

  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed();
    this._setDescription();
  }

  calcSpeed() {
    //km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

////////////////////////////////////////////////////////
// APPLICATION ARCHITECTURE

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

class App {
  #map;
  #mapZoomLevel = 13;
  #mapEvent;
  #workouts = [];

  constructor() {
    //Get user's position
    this._getPosition(); //–≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏ addEventListener-—ã –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞

    //Get data from local storage
    this._getLocalStorage();

    //Attach event handlers
    form.addEventListener('submit', this._newWorkout.bind(this)); //–≤ EventListener-–∞—Ö this = —Ç–æ–º—É, –∫ —á–µ–º—É –º—ã –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ this=form), –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–µ–Ω bind –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞ –∫ –Ω–∞—à–µ–º—É –∫–ª–∞—Å—Å—É
    inputType.addEventListener('change', this._toggleElevationField);
    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
  }

  _getPosition() {
    if (navigator.geolocation) {
      //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Ñ–∏—á–∏ (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          //bind –Ω—É–∂–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è getCurrentPosition –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ –∫–∞–∫ –º–µ—Ç–æ–¥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –±—É–¥–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ this —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω undefined, —á—Ç–æ –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
          //–≤—Ç–æ—Ä–æ–π –∫–æ–ª–ª–±—ç–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —é–∑–µ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
          alert('Could not get your position');
        }
      );
    }
  }

  _loadMap(position) {
    //API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è 2 –∫–æ–ª–ª–±—ç–∫–∞, –ø–µ—Ä–≤—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    const { latitude } = position.coords; //—Å –ø–æ–º–æ—â—å—é –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º latitude –∏ —Å—Ä–∞–∑—É –∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ –≤—ã–∑–æ–≤–∞ navigator.geolocation.getCurrentPosition
    const { longitude } = position.coords;
    console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);

    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, this.#mapZoomLevel); //13 - —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–∏–ª—å–Ω–æ –∑–∞–∑—É–º–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    //Handling clicks on map
    this.#map.on('click', this._showForm.bind(this)); //eventlistener ON, –∫–æ—Ç–æ—Ä—ã–π —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ–Ω –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Leaflet

    this.#workouts.forEach(work => {
      this._renderWorkoutMarker(work);
    });
  }

  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    //Empty inputs
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';
    form.style.display = 'none'; //—á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ –∑–∞–∫—Ä—ã–≤–∞–ª–∞—Å—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    form.classList.add('hidden');
    setTimeout(() => (form.style.display = 'grid'), 1000);
  }

  _toggleElevationField() {
    //–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    const validInputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp)); //–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–ª–∞

    const allPositive = (...inputs) => inputs.every(inp => inp > 0); //–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ

    e.preventDefault();

    //Get data from form
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    //If workout running, create running object
    if (type === 'running') {
      const cadence = +inputCadence.value;
      //Check if data is valid
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(cadence)
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      )
        return alert('Inputs have to be positive numbers!');

      workout = new Running([lat, lng], distance, duration, cadence);
    }

    //If workout cycling, create cycling object
    if (type === 'cycling') {
      const elevation = +inputElevation.value;

      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      )
        return alert('Inputs have to be positive numbers!');

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    //Add new object to workout array
    this.#workouts.push(workout);
    console.log(workout);

    //Render workout on map as marker
    this._renderWorkoutMarker(workout);

    //Render workout on list
    this._renderWorkout(workout);

    //Hide form + Clear input fields
    this._hideForm();

    //Set local storage to all workouts
    this._setLocalStorage();
  }

  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`, //–ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º type, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è ' : 'üö¥‚Äç‚ôÄÔ∏è '} ${workout.description}`
      )
      .openPopup();
  }

  _renderWorkout(workout) {
    let html = `
        <li class="workout workout--${workout.type}" data-id="${workout.id}">
            <h2 class="workout__title">${workout.description}</h2>
            <div class="workout__details">
                <span class="workout__icon">${
                  workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è ' : 'üö¥‚Äç‚ôÄÔ∏è '
                }</span>
                <span class="workout__value">${workout.distance}</span>
                <span class="workout__unit">km</span>
            </div>
            <div class="workout__details">
                <span class="workout__icon">‚è±</span>
                <span class="workout__value">${workout.duration}</span>
                <span class="workout__unit">min</span>
            </div>`;

    if (workout.type === 'running') {
      html += `
        <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">min/km</span>
        </div>
        <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">spm</span>
        </div>
    </li>`;
    }
    if (workout.type === 'cycling') {
      html += `
        <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.speed.toFixed(1)}</span>
            <span class="workout__unit">km/h</span>
        </div>
        <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevationGain}</span>
            <span class="workout__unit">m</span>
        </div>
    </li>`;
    }

    form.insertAdjacentHTML('afterend', html);
  }

  _moveToPopup(e) {
    const workoutEl = e.target.closest('.workout');

    if (!workoutEl) return;

    const workout = this.#workouts.find(
      work => work.id === workoutEl.dataset.id
    );

    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      //–º–µ—Ç–æ–¥ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Leaflet –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ –∫ –º–µ—Å—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      animate: true,
      pan: {
        duration: 1,
      },
    });

    //using the public interface
    // workout.click();
  }

  _setLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts)); //API, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞–∂–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ. –í—Ç–æ—Ä—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞—à –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é JSON.stringify
    //localStorage –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö, –æ—á–µ–Ω—å –∑–∞–º–µ–¥–ª–∏—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –ø–æ—ç—Ç–æ–º—É –æ–∫
  }

  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts')); //–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç

    if (!data) return;

    this.#workouts = data;

    this.#workouts.forEach(work => {
      this._renderWorkout(work);
    });
  }

  reset() {
    localStorage.removeItem('workouts');
    location.reload();
  }
}

const app = new App();
